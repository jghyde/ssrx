<?php
function ssrx_import_menu() {
  $menu['ssrx/import/pharmacies'] = array(
    'title' => t('Import Pharmacies'),
    'page callback' => 'ssrx_import_pharmacies',
    'access callback' => TRUE,
  );
  $menu['ssrx/import/drugs'] = array(
    'title' => t('Import Drugs'),
    'page callback' => 'ssrx_import_drugs',
    'access callback' => TRUE,
  );
  $menu['ssrx/import/prices'] = array(
    'title' => t('Import Prices'),
    'page callback' => 'ssrx_import_prices',
    'access callback' => TRUE,
  );
  $menu['ssrx/import/doctors'] = array(
    'title' => t('Import Doctors'),
    'page callback' => 'ssrx_import_doctors',
    'access callback' => TRUE,
  );

  return $menu;
}

function _ssrx_import_add_or_get_term($term, $vocabulary) {
  $tid = taxonomy_get_term_by_name($term, $vocabulary->title);
  if (count($tid) > 0) {
    $tid = array_shift(array_keys($tid));
  }
  else {
    $term_object = new stdClass();
    $term_object->name = ucwords(strtolower($term));
    $term_object->vid = $vocabulary->vid;
    taxonomy_term_save($term_object);
    $tid = $term_object->tid;
  }
  return $tid;
}

function ssrx_import_prices() {
  $result = db_query("SHOW TABLES LIKE 'price_%'");
  $tables = array();
  $total_count = 0;
  while ($table = $result->fetchField()) {
    $tables[] = $table;
    $total_count += ${'count_' . $table} = db_query('SELECT COUNT(DISTINCT id) FROM ' . $table)->fetchField();
  }

  $batch_size = 250;
  foreach ($tables as $table) {
    $counter = 0;
    while ($counter <= ${'count_' . $table}) {
      $operations[] = array(
        '_ssrx_import_prices',
        array(
          $table,
          $counter,
          $batch_size,
          $total_count,
        ),
      );

      if (isset($_REQUEST['one_batch'])) {
        break;
      }
      $counter += $batch_size;
    }
  }

  if (count($operations)) {
    $batch = array(
      'operations' => $operations,
      'finished' => 'ssrx_import_batch_finished',
      'title' => t('Processing Prices Batch'),
      'init_message' => t('Now processing 0 - :num2 of :total', array(':num2' => $batch_size, ':total' => $total_count)),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Drugs Prices has encountered an error.'),
    );

    batch_set($batch);
    batch_process('/');
  }
  else {
    drupal_set_message('Nothing to import');
    drupal_goto('/');
  }
}

function _ssrx_import_prices($table, $start, $batch_size, $total, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = $total;
  }
  $prices = db_query_range('SELECT * FROM ' . $table . ' ORDER BY id ASC', $start, $batch_size);
  foreach ($prices as $price) {
    if ($price->fda_appl_id == 'fda_appl_id') {
      continue;
    }
    if (empty($price->pill_price)) {
      continue;
    }
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'drug')
      ->fieldCondition('field_fda_id', 'value', $price->fda_appl_id)
      ->fieldCondition('field_fda_product_id', 'value', $price->fda_prod_no);
    $result = $query->execute();
    $drug_nid = array_keys($result['node']);
    if (count($drug_nid) == 0) {
      watchdog('ssrx', 'Import failed for price (no match) on FDA ID :id-:pid', array(':id' => $price->fda_appl_id, ':pid' => $price->fda_prod_no));
      continue;
    }
    if (count($drug_nid) > 1) {
      watchdog('ssrx', 'Import failed for price (multiple matches) on FDA ID :id-:pid', array(':id' => $price->fda_appl_id, ':pid' => $price->fda_prod_no));
      continue;
    }
    $price->drug_nid = $drug_nid[0];

    $node = new stdClass();
    $node->type = 'drug_price';
    node_object_prepare($node);
    $node->language = LANGUAGE_NONE;
    $node->field_location[LANGUAGE_NONE][0]['nid'] = $price->store_nid;
    $node->field_drug_variety[LANGUAGE_NONE][0]['nid'] = $price->drug_nid;
    $node->field_quantity[LANGUAGE_NONE][0]['value'] = $price->pill_quantity;
    $node->field_price[LANGUAGE_NONE][0]['value'] = $price->pill_price;
    node_save($node);

    $context['results'][] = $node->title;
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $node->nid;
    $context['message'] = t('Now processing :num - :num2 of :total', array(':num' => $start, ':num2' => ($start + $batch_size), ':total' => $context['sandbox']['max']));
    $node = null;
  }
}

function ssrx_import_drugs() {
  $drug_count = db_query('SELECT COUNT(DISTINCT hyde_id) FROM {drugs_to_import}')->fetchField();
  $batch_size = 200;
  $counter = 0;
  $operations = array();
  while ($counter < $drug_count) {
    if ($counter >= $drug_count) {
      $batch_size = $drug_count - $counter;
    }
    $operations[] = array(
      '_ssrx_import_drug',
      array(
        $counter,
        $batch_size,
      ),
    );
    $counter += $batch_size;
    if (isset($_REQUEST['one_batch'])) {
      break;
    }
  }

  if (count($operations)) {
    $batch = array(
      'operations' => $operations,
      'finished' => 'ssrx_import_batch_finished',
      'title' => t('Processing Drugs Batch'),
      'init_message' => t('Drugs Batch is starting.'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Drugs Batch has encountered an error.'),
    );
    batch_set($batch);
    batch_process('/');
  }
  else {
    drupal_set_message('Nothing to import');
    drupal_goto('/');
  }
}

function _ssrx_import_drug($start, $batch_size, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = db_query('SELECT COUNT(DISTINCT hyde_id) FROM {drugs_to_import}')->fetchField();
  }
  if (!isset($context['format_tids'])) {
    $context['format_tids'] = array();
  }
  if (!isset($context['format_vocabulary'])) {
    $context['format_vocabulary'] = taxonomy_vocabulary_machine_name_load('drug_format');
  }
  if (!isset($context['route_tids'])) {
    $context['route_tids'] = array();
  }
  if (!isset($context['route_vocabulary'])) {
    $context['route_vocabulary'] = taxonomy_vocabulary_machine_name_load('drug_route');
  }
  if (!isset($context['type_tids'])) {
    $context['type_tids'] = array();
  }
  if (!isset($context['type_vocabulary'])) {
    $context['type_vocabulary'] = taxonomy_vocabulary_machine_name_load('drug_type');
  }

  $drugs = db_query_range("SELECT * FROM {drugs_to_import} WHERE hyde_id > :start ORDER BY hyde_id ASC", 0, $batch_size, array(':start' => $start));
  foreach ($drugs as $drug) {
    $node = new stdClass();
    $node->type = 'drug';
    node_object_prepare($node);
    $node->language = LANGUAGE_NONE;

    $node->title = check_plain(ucwords(strtolower($drug->tradename)));
    $node->field_brand_or_generic[LANGUAGE_NONE][0]['value'] = $drug->brand_generic;
    $node->field_fda_id[LANGUAGE_NONE][0]['value'] = $drug->appl_no;
    $node->field_fda_product_id[LANGUAGE_NONE][0]['value'] = $drug->product_no;

    $format = ucwords(strtolower($drug->df));
    if (!isset($context['format_tids'][$format])) {
      $context['format_tids'][$format] = _ssrx_import_add_or_get_term($format, $context['format_vocabulary']);
    }
    $node->field_drug_format[LANGUAGE_NONE][0]['tid'] = $context['format_tids'][$format];

    $type = ucwords(strtolower($drug->type));
    if (!isset($context['type_tids'][$format])) {
      $context['type_tids'][$type] = _ssrx_import_add_or_get_term($type, $context['type_vocabulary']);
    }
    $node->field_drug_type[LANGUAGE_NONE][0]['tid'] = $context['type_tids'][$type];

    $route = ucwords(strtolower($drug->route));
    if (!isset($context['route_tids'][$route])) {
      $context['route_tids'][$route] = _ssrx_import_add_or_get_term($route, $context['route_vocabulary']);
    }
    $node->field_route[LANGUAGE_NONE][0]['tid'] = $context['route_tids'][$route];

    $ingredients = split(';', str_replace('; ', ';', $drug->ingredient));
    $strengths = split(';', str_replace('; ', '', $drug->strength));
    $ingredient_collection = array();
    for ($i = 0; $i < count($ingredients); $i++) {
      $field_collection_item = null;
      $field_collection_item = entity_create('field_collection_item', array('field_name' => 'field_ingredients_collection'));
      $field_collection_item->setHostEntity('node', $node);
      $field_collection_item->field_ingredient[LANGUAGE_NONE][0]['value'] = $ingredients[$i];
      $field_collection_item->field_ingredient_strength[LANGUAGE_NONE][0]['value'] = $strengths[$i];
      $field_collection_item->save();
      $ingredient_collection[] = array('value' => $field_collection_item->item_id);
    }
    $node->field_ingredients_collection[LANGUAGE_NONE] = $ingredient_collection;
    unset($field_collection_item);
    unset($ingredient_collection);
    unset($strengths);
    unset($ingredients);
    unset($route);
    unset($type);
    node_save($node);

    $context['results'][] = $node->title;
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $node->nid;
    $context['message'] = t('Now processing :num - :num2 of :total', array(':num' => $start, ':num2' => ($start + $batch_size), ':total' => $context['sandbox']['max']));
    unset($node);
  }
}

function ssrx_import_pharmacies() {
  $pharmacy_count = db_query('SELECT COUNT(DISTINCT id) FROM {Pharmacies}')->fetchField();
  $batch_size = 250;
  $counter = 0;
  $operations = array();
  while ($counter < $pharmacy_count) {
    if ($counter >= $pharmacy_count) {
      $batch_size = $pharmacy_count - $counter;
    }
    $operations[] = array(
      '_ssrx_import_pharmacy',
      array(
        $counter,
        $batch_size,
      ),
    );
    $counter += $batch_size;
    if (isset($_REQUEST['one_batch'])) {
      break;
    }
  }

  if (count($operations)) {
    $batch = array(
      'operations' => $operations,
      'finished' => 'ssrx_import_batch_finished',
      'title' => t('Processing Pharmacies Batch'),
      'init_message' => t('Pharmacies Batch is starting.'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Pharmacies Batch has encountered an error.'),
    );
    batch_set($batch);
    batch_process('/');
  }
  else {
    drupal_set_message('Nothing to import');
    drupal_goto('/');
  }
}

function _ssrx_import_pharmacy($start, $batch_size, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = db_query('SELECT COUNT(DISTINCT id) FROM {Pharmacies}')->fetchField();
  }
  if (!isset($context['chain_tids'])) {
    $context['chain_tids'] = array();
  }
  if (!isset($context['chain_vocabulary'])) {
    $context['chain_vocabulary'] = taxonomy_vocabulary_machine_name_load('pharmacy_chain');
  }

  $result = db_query_range("SELECT * FROM {Pharmacies} WHERE id > :start ORDER BY id ASC", 0, $batch_size, array(':start' => $start));
  foreach ($result as $line) {
    $node = new stdClass();
    $node->type = 'pharmacy';
    node_object_prepare($node);
    $node->language = LANGUAGE_NONE;

    // @TODO no security problems with importing real characters. stubhub.com lists "Texas A&M in autosuggest as "Texas AM" and it pisses me off.
    //$node->title = check_plain($line->PharmacyName);
    $node->title = $line->PharmacyName;

    // Get the chain taxonomy term id. Create the term if it's missing.
    if (!empty($line->HqName) && $line->ChainOrIndependent == 'Chain') {
      $chain = ucwords(strtolower($line->HqName));
      if (!isset($context['chain_tids'][$chain])) {
        $context['chain_tids'][$chain] = _ssrx_import_add_or_get_term($chain, $context['chain_vocabulary']);
      }
      $node->field_chain[LANGUAGE_NONE][0]['tid'] = $context['chain_tids'][$chain];
      unset($chain);
    }
    // set the ssrx zip+4 id thingy
    $node->field_ssrx_pharmacy_id[LANGUAGE_NONE][0]['value'] = $line->PharmacyId;

    // if the pharmacy is 24 hrs, set that
    $node->field_24_hour_pharmacy[LANGUAGE_NONE][0]['value'] = $line->istf;

    // if the pharmacy is online only, set that:
    $node->field_online_pharmacy[LANGUAGE_NONE][0]['value'] = $line->online;

    // Set the Hays ID
    $node->field_hays_id[LANGUAGE_NONE][0]['value'] = $line->HayesIdNumber;

    // Make sure these lats and lons have values and if they do not, set the values to '' to allow google maps api to update them.
    $lat = '';
    if (isset($line->lat) && !empty($line->lat) && $line->lat != 0) {
      $lat = $line->lat;
    }
    $lon = '';
    if (isset($line->lon) && !empty($line->lon) && $line->lon != 0) {
      $lon = $line->lon;
    }
    if (empty($lat) || empty($lon)) {
      $lon = '';
      $lat = '';
    }
    $location = array(
      'street' => $line->PharmacyAddress,
      'city' => $line->PharmacyCity,
      'province' => $line->PharmacyState,
      'postal_code' => $line->PharmacyZip,
      'latitude' => $lat,
      'longitude' => $lon,
      'phone' => $line->PharmacyPhone,
      'fax' => $line->PharmacyFax,
      'country' => 'us',
      'country_name' => 'United States',
    );
    $node->locations = array();
    $node->locations[] = $node->location = $location;
    node_save($node);

    unset($line);
    unset($location);
    unset($lat);
    unset($lon);
    $context['results'][] = $node->title;

    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $node->nid;
    $context['message'] = t('Now processing :num - :num2 of :total', array(':num' => $start, ':num2' => ($start + $batch_size), ':total' => $context['sandbox']['max']));
    unset($node);
  }
}

/**
 * Starts the batch API process for importing
 * doctors into the ssrx database.
 */
function ssrx_import_doctors() {
  $doctor_count = db_query('SELECT COUNT(DISTINCT id) FROM {doctors}')->fetchField();
  $batch_size = 250;
  $counter = 0;
  $operations = array();
  while ($counter < $doctor_count) {
    if ($counter >= $doctor_count) {
      $batch_size = $doctor_count - $counter;
    }
    $operations[] = array(
      '_ssrx_import_doctors',
      array(
        $counter,
        $batch_size,
      ),
    );
    $counter += $batch_size;
    if (isset($_REQUEST['one_batch'])) {
      break;
    }
  }

  if (count($operations)) {
    $batch = array(
      'operations' => $operations,
      'finished' => 'ssrx_import_batch_finished',
      'title' => t('Processing Doctor Import Batch'),
      'init_message' => t('Doctor Import Batch is starting.'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Doctors Import Batch has encountered an error.'),
    );
    batch_set($batch);
    batch_process('/');
  }
  else {
    drupal_set_message('Nothing to import');
    drupal_goto('/');
  }
}

/**
 * Imports doctors from a batch API call. Imports from a
 * separate database table added to the Drupal install.
 */
function _ssrx_import_doctors($start, $batch_size, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = db_query('SELECT COUNT(DISTINCT id) FROM {doctors}')->fetchField();
  }
  if (!isset($context['doctor_tids'])) {
    $context['doctor_tids'] = array();
  }
  if (!isset($context['doctor_vocabulary'])) {
    $context['doctor_vocabulary'] = taxonomy_vocabulary_machine_name_load('doctor_specialty');
  }

  $result = db_query_range("SELECT * FROM {doctors} order by id ASC", $start, $batch_size);
  foreach ($result as $line) {
    $node = new stdClass();
    $node->type = 'doctors';
    node_object_prepare($node);
    $node->language = LANGUAGE_NONE;
    // for debug
     $example_node = node_load('138016');
    
    // Set the title
    $node->title = $line->name;
    
    // Set the taxonomy term for specialty
    if (!empty($line->specialty)) {
      $specialty = ucwords(strtolower($line->specialty));
      if (!isset($context['doctor_tids'][$specialty])) {
        $context['doctor_tids'][$specialty] = _ssrx_import_add_or_get_term($specialty, $context['doctor_vocabulary']);
      }
      $node->field_doctor_specialty[LANGUAGE_NONE][]['tid'] = $context['doctor_tids'][$specialty];
      unset($specialty);
    }
    if (!empty($line->title)) {
      $node->field_doctor_title[LANGUAGE_NONE][]['value'] = $line->title;
    }

    // Make sure these lats and lons have values and if they do not, set the values to '' to allow google maps api to update them.
    $lat = '';
    if (isset($line->lat) && !empty($line->lat) && $line->lat != 0) {
      $lat = $line->lat;
    }
    $lon = '';
    if (isset($line->lon) && !empty($line->lon) && $line->lon != 0) {
      $lon = $line->lon;
    }
    if (empty($lat) || empty($lon)) {
      $lon = '';
      $lat = '';
    }
    $location = array(
      'name' => str_replace( array( '\'', '"', ',' , ';', '<', '>' ), '', $line->clinic),
      'street' => $line->address,
      'city' => $line->city,
      'province' => $line->state,
      'postal_code' => $line->zip,
      'latitude' => $lat,
      'longitude' => $lon,
      'locpick' => array(
        'user_latitude' => $lat,
        'user_longitude' => $lon,
      ),
      'phone' => _ssrx_import_format_phone($line->phone),
      'fax' => _ssrx_import_format_phone($line->fax),
      'source' => '1',     
      'country' => 'us',
      'country_name' => 'United States',
    );
    $node->locations = array();
    $node->locations[] = $node->location = $location;
    node_save($node);

    unset($line);
    unset($location);
    unset($lat);
    unset($lon);
    $context['results'][] = $node->title;

    // Update our progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_node'] = $node->nid;
    $context['message'] = t('Now processing :num - :num2 of :total', array(':num' => $start, ':num2' => ($start + $batch_size), ':total' => $context['sandbox']['max']));
    unset($node);
  }
}

/**
 * The summary of the batch success or failure
 */
function ssrx_import_batch_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    drupal_set_message(t('@count rows of data imported.', array('@count' => count($results),)));
    drupal_set_message(t('The final result was "%final"', array('%final' => end($results))));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}

/**
 * Helper function that formats phone numbers
 */
function _ssrx_import_format_phone($number = '') {
  if (preg_match( '/^\+\d(\d{3})(\d{3})(\d{4})$/', $string,  $matches ) ) {
    $result = '(' . $matches[1] . ') '  . $matches[2] . '-' . $matches[3];
    return $result;
  }
  else {
    return $string;
  }
}

